/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package brickbreaker;
import java.awt.Color;
import java.awt.Font;
import java.awt.Panel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author wwwsh
 */
public class MenuGame extends javax.swing.JFrame {
    private String username;
    public Connection cn;
    public Statement st;
    /**
     * Creates new form MenuGame
     */
    public MenuGame() {   
        String path = new File("src/Image/game.gif").getAbsolutePath();
        BackgroundPanel backgroundPanel = new BackgroundPanel(path);
        setContentPane(backgroundPanel);
        initComponents();      
    }
    public MenuGame(String username) throws SQLException
    {
        this.username = username;   
        String path = new File("src/Image/game.gif").getAbsolutePath();
        BackgroundPanel backgroundPanel = new BackgroundPanel(path);
        setContentPane(backgroundPanel);
        initComponents();
        Userlabel.setText(this.username);   
        
        try {
            cn = ConnectionFactory.getConnection();
            st = cn.createStatement();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Not Connected");
        }
        
        String qr = "Select Max(Score) as max from history where UserName = '"+this.username+"'";
        ResultSet rs = st.executeQuery(qr);
        while (rs.next()){
            ScoreLabel.setText(rs.getInt("max")+"");
        }
     
        DefaultTableModel dftb = new DefaultTableModel();
        HistoryTable.setModel(dftb);
        dftb.addColumn("Player");
        dftb.addColumn("TimeStart");
        dftb.addColumn("TimeFinish");
        dftb.addColumn("TotalTime");
        dftb.addColumn("Score");
        dftb.addColumn("Difficult Level");
        
        String sql = "select * from history where UserName = '" +this.username+"' group by TimeStart, TimeFinish order by TimeStart desc";
        try 
        {
            ResultSet rss = st.executeQuery(sql);
            while (rss.next()) 
            {
                dftb.addRow(new Object[]{rss.getString("UserName"),rss.getString("TimeStart"), rss.getString("TimeFinish"), rss.getInt("TotalTime")+"s", rss.getInt("Score"), rss.getString("DifficultLevel")});
            }
            dftb.fireTableDataChanged();
        } 
        catch (SQLException e) 
        {
            JOptionPane.showMessageDialog(null, "Lỗi");
        } 
         HistoryTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        HistoryTable = new javax.swing.JTable();
        PlayBtn = new javax.swing.JButton();
        ExitBtn = new javax.swing.JButton();
        LogoutBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        settingBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        ScoreLabel = new javax.swing.JLabel();
        Userlabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("BrickBreaker Menu");
        setLocation(new java.awt.Point(400, 150));

        jLabel1.setFont(new java.awt.Font("Showcard Gothic", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 102, 255));
        jLabel1.setText("WELCOME TO BRICKS BREAKER");

        HistoryTable.setBackground(new java.awt.Color(153, 0, 153));
        HistoryTable.setFont(new java.awt.Font("Showcard Gothic", 0, 12)); // NOI18N
        HistoryTable.setForeground(new java.awt.Color(255, 255, 255));
        HistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        HistoryTable.setGridColor(new java.awt.Color(255, 255, 255));
        HistoryTable.setRowHeight(30);
        HistoryTable.setSelectionBackground(new java.awt.Color(255, 255, 255));
        HistoryTable.setSelectionForeground(new java.awt.Color(102, 0, 102));
        HistoryTable.setShowGrid(true);
        HistoryTable.setVerifyInputWhenFocusTarget(false);
        jScrollPane1.setViewportView(HistoryTable);

        PlayBtn.setBackground(new java.awt.Color(153, 0, 153));
        PlayBtn.setFont(new java.awt.Font("Showcard Gothic", 0, 20)); // NOI18N
        PlayBtn.setForeground(new java.awt.Color(255, 255, 255));
        PlayBtn.setText("PLAY");
        PlayBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PlayBtnActionPerformed(evt);
            }
        });

        ExitBtn.setBackground(new java.awt.Color(51, 0, 51));
        ExitBtn.setFont(new java.awt.Font("Showcard Gothic", 1, 18)); // NOI18N
        ExitBtn.setForeground(new java.awt.Color(255, 255, 255));
        ExitBtn.setText("QUIT");
        ExitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitBtnActionPerformed(evt);
            }
        });

        LogoutBtn.setBackground(new java.awt.Color(0, 0, 0));
        LogoutBtn.setFont(new java.awt.Font("Showcard Gothic", 0, 18)); // NOI18N
        LogoutBtn.setForeground(new java.awt.Color(255, 255, 255));
        LogoutBtn.setText("LOGOUT");
        LogoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LogoutBtnActionPerformed(evt);
            }
        });

        settingBtn.setBackground(new java.awt.Color(102, 0, 102));
        settingBtn.setFont(new java.awt.Font("Showcard Gothic", 0, 20)); // NOI18N
        settingBtn.setForeground(new java.awt.Color(255, 255, 255));
        settingBtn.setText("SETTING");
        settingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingBtnActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 204, 255), 2, true), javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 153, 255), 2)));

        jLabel2.setFont(new java.awt.Font("Showcard Gothic", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 0, 153));
        jLabel2.setText("Player:");

        jLabel3.setFont(new java.awt.Font("Showcard Gothic", 1, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(153, 0, 153));
        jLabel3.setText("Best Score:");

        ScoreLabel.setFont(new java.awt.Font("Showcard Gothic", 0, 18)); // NOI18N
        ScoreLabel.setForeground(new java.awt.Color(153, 0, 153));
        ScoreLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        ScoreLabel.setText("jLabel5");

        Userlabel.setFont(new java.awt.Font("Showcard Gothic", 0, 18)); // NOI18N
        Userlabel.setForeground(new java.awt.Color(153, 0, 153));
        Userlabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        Userlabel.setLabelFor(jScrollPane1);
        Userlabel.setText("username");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ScoreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Userlabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(Userlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(ScoreLabel))
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 153, 255), 3, true));

        jLabel5.setBackground(new java.awt.Color(255, 0, 255));
        jLabel5.setFont(new java.awt.Font("Showcard Gothic", 0, 18)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(153, 0, 153));
        jLabel5.setText("HISTORY");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addContainerGap(7, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1)
                        .addGap(140, 140, 140))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 498, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(LogoutBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ExitBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(settingBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(PlayBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(39, 39, 39))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PlayBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(settingBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ExitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(LogoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(5, 5, 5)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap(82, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void PlayBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PlayBtnActionPerformed
        // TODO add your handling code here: 
        DifficultMenu dif = new DifficultMenu(username);
        dif.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_PlayBtnActionPerformed

    private void ExitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitBtnActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_ExitBtnActionPerformed

    private void LogoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LogoutBtnActionPerformed
        // TODO add your handling code here:
        this.dispose();
        LoginPlayer log = new LoginPlayer();
        log.setVisible(true);
    }//GEN-LAST:event_LogoutBtnActionPerformed

    private void settingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingBtnActionPerformed
        // TODO add your handling code here:
        Panel settingPanel = new Panel();
        
        //delete select history button
        JButton deleteButton = new JButton("DELETE SELECT HISTORY");
        deleteButton.setBounds(35, 30,  230, 40);
        deleteButton.setBackground(new Color(178, 58, 238));
        deleteButton.setFont(new Font("Showcard Gothic", Font.PLAIN, 15));
        deleteButton.setForeground(Color.white);
        
        //Clear Button
        JButton ClearButton = new JButton("CLEAR HISTORY");
        ClearButton.setBounds(35, 100,  230, 40);
        ClearButton.setBackground(new Color(148, 0, 211));
        ClearButton.setFont(new Font("Showcard Gothic", Font.PLAIN, 15));
        ClearButton.setForeground(Color.white);
        
        //Remove Account Button
        JButton RemoveAccButton = new JButton("REMOVE ACCOUNT");
        RemoveAccButton.setBounds(35, 170,  230, 40);
        RemoveAccButton.setBackground(new Color(199, 21, 133));
        RemoveAccButton.setFont(new Font("Showcard Gothic", Font.PLAIN, 15));
        RemoveAccButton.setForeground(Color.white);
        
        //Close Button
        JButton CloseButton = new JButton("CLOSE");
        CloseButton.setBounds(24, 240,  80, 40);
        CloseButton.setBackground(new Color(104, 34, 139));
        CloseButton.setFont(new Font("Showcard Gothic", Font.PLAIN, 15));
        CloseButton.setForeground(Color.white);
        
        //ResetPassword Button
        JButton ResetButton = new JButton("RESET PASSWORD");
        ResetButton.setBounds(114, 240,  175, 40);
        ResetButton.setBackground(new Color(104, 34, 139));
        ResetButton.setFont(new Font("Showcard Gothic", Font.PLAIN, 15));
        ResetButton.setForeground(Color.white);
        
        settingPanel.add(deleteButton);
        settingPanel.add(CloseButton);
        settingPanel.add(ClearButton);
        settingPanel.add(RemoveAccButton);
        settingPanel.add(ResetButton);
        settingPanel.setBounds(525, 170, 300, 300);
        settingPanel.setBackground(new Color(85, 26, 139));
        this.add(settingPanel);
        settingPanel.setVisible(true);
        
        //Xóa lịch sử đang chọn
        deleteButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                DefaultTableModel dftb = (DefaultTableModel) HistoryTable.getModel();
                if (HistoryTable.getSelectedRowCount() == 1) {
                    int row = HistoryTable.getSelectedRow();
                    
                    String user = (String) HistoryTable.getValueAt(row, 0);
                    String timeStart = (String) HistoryTable.getValueAt(row, 1);
                    String timeFinish = (String) HistoryTable.getValueAt(row, 2);
                    
                    String sql = "delete from history where UserName = '" + user + "' and TimeStart = '" +timeStart +"' and TimeFinish = '" + timeFinish +"'";
                    try 
                    {  
                        PreparedStatement statement = cn.prepareStatement(sql);
                        statement.executeUpdate();
                        statement.close();
                        JOptionPane.showMessageDialog(null, "Xóa thành công");
                        dftb.removeRow(row);
                        
                        
                        String qr = "Select Max(Score) as max from history where UserName = '"+username+"'";
                        ResultSet rs = st.executeQuery(qr);
                        while (rs.next()){
                            ScoreLabel.setText(rs.getInt("max")+"");
                        }
                    } 
                    catch (SQLException ex) 
                    {
                        ex.printStackTrace();
                        JOptionPane.showMessageDialog(null, "Lỗi");
                    }   
                }
            }
        });
        
        //Xóa toàn bộ lịch sử chơi
        ClearButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                DefaultTableModel dftb = (DefaultTableModel) HistoryTable.getModel();

                String sql = "delete from history where UserName = '" + username + "'";
                try 
                { 
                    PreparedStatement statement = cn.prepareStatement(sql);
                    statement.executeUpdate();
                    statement.close();
                    JOptionPane.showMessageDialog(null, "Xóa thành công");
                    dftb.setRowCount(0);
                    ScoreLabel.setText("0");
                } 
                catch (SQLException ex) 
                {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Lỗi");
                }
            }
        });
        
        //Xóa tài khoản
        RemoveAccButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {   
                try 
                { 
                    String sql = "delete from history where UserName = '" + username + "'";
                    PreparedStatement statement = cn.prepareStatement(sql);
                    statement.executeUpdate();
                    statement.close();
                    
                    sql = "delete from player where UserName = '" + username + "'";
                    statement = cn.prepareStatement(sql);
                    statement.executeUpdate();
                    statement.close();
                    JOptionPane.showMessageDialog(null, "Xóa thành công");
                    
                    LoginPlayer login = new LoginPlayer();
                    login.setVisible(true);
                    dispose();
                } 
                catch (SQLException ex) 
                {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Lỗi");
                }
            }
        });
        
        //Cập nhật mật khẩu
        ResetButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {   
                RePassword repass = new RePassword(username);
                repass.setVisible(true);
                dispose();
            }
        });
        
        //Đóng cửa sổ setting
        CloseButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                settingPanel.setVisible(false);     
            }
        });
    }//GEN-LAST:event_settingBtnActionPerformed

    /**
     * @param args the command line arguments
     */
//    public static void main(String args[]) {
//        /* Set the Nimbus look and feel */
//        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
//        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
//         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
//         */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(MenuGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(MenuGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(MenuGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(MenuGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>
//
//        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable() {
//            public void run() {
//                new MenuGame().setVisible(true);           
//            }
//        });
//    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ExitBtn;
    private javax.swing.JTable HistoryTable;
    private javax.swing.JButton LogoutBtn;
    private javax.swing.JButton PlayBtn;
    private javax.swing.JLabel ScoreLabel;
    private javax.swing.JLabel Userlabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton settingBtn;
    // End of variables declaration//GEN-END:variables
}

